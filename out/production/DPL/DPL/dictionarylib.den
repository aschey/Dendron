def AvlTree[comp getVal] [
    def AvlNode[val] [
        var left = null;
        var right = null;
        var height = 0;
        var parent = null;
        return this;
    ]

    var root = null;

    def insert[x] [
        var node = AvlNode[x];
        if [root == null] [
            root = node;
        ]
        else [
            _insert[root node];
            setBalance[node];
            insertionFixup[node];
        ]
    ]

    def delete[node] [
        if [!isLeaf[node]] [
            var predecessor = getPredecessor[node];
            if [predecessor != null] [
                node.val = predecessor.val;
            ]
            else [
                var successor = getSuccessor[node];
                node.val = successor.val;
            ]
            deleteFixup[node];
        ]
        prune[node];
    ]

    def find[val] [
        return _find[val root];
    ]
        

    def printTree[] [
        _printTree[root];
    ]

    def _insert[curRoot node] [
        if [comp[node.val curRoot.val] < 0] [
            if [curRoot.left == null] [
                setLeftChild[curRoot node];
            ]
            else [
                _insert[curRoot.left node];
            ]
        ]
        else [
            if [curRoot.right == null] [
                setRightChild[curRoot node];
            ]
            else [
                _insert[curRoot.right node];
            ]
        ]
    ]

    def prune[node] [
        var parent = node.parent;

        if [parent == null] [
            root = null;
        ]
        else if [isLeftChild[node]] [
            setLeftChild[parent null];
        ]
        else [
            setRightChild[parent null];
        ]
    ]

    def _printTree[curRoot] [
        if [curRoot != null] [
            _printTree[curRoot.left];
            println[getVal[curRoot.val]];
            _printTree[curRoot.right];
        ]
    ]

    def insertionFixup[node] [
        while [!eq[node root]] [
            var parent = node.parent;
            var parentFav = favorite[parent];
            var sib = sibling[node];

            if [[sib != null] and eq[parentFav sib]] [
                setBalance[parent];
                return;
            ]
            else if [isBalanced[parent]] [
                setBalance[parent];
                node = parent;
            ]
            else [
                var fav = favorite[node];
                if [fav != null] [
                    if [!isLinear[node fav] and !isLinear[parent node]] [
                        rotate[node fav];
                        rotate[parent fav];
                        setBalance[node];
                        setBalance[parent];
                        setBalance[fav];
                    ]
                ]
                else [
                    rotate[parent node];
                    setBalance[parent];
                    setBalance[node];
                ]
            ]
        ]       
    ]

    def deleteFixup[node] [
        while [!eq[node root]] [
            var parent = node.parent;
            var parentFav = favorite[parent];
            
            if [eq[parentFav node]] [
                setBalance[parent];
                node = parent;
            ]
            else if [parentFav == null] [
                setBalance[parent];
                return;
            ]
            else [
                var sib = sibling[node];
                var fav = favorite[sib];
                if [fav != null] [
                    if [!isLinear[parent sib] and !isLinear[sib fav]] [
                        rotate[sib fav];
                        rotate[fav parent];
                        setBalance[parent];
                        setBalance[sib];
                        setBalance[fav];
                        node = fav;
                    ]
                    else [
                        rotate[parent sib];
                        setBalance[parent];
                        setBalance[sib];
                        if [fav == null] [
                            return;
                        ]
                        node = sib;
                    ]
                ]
            ]
        ]
    ]

    def getPredecessor[node] [
        if [node.left != null] [
            return _getPredecessor[node.left];
        ]
        return null;
    ]

    def getSuccessor[node] [
        if [node.right != null] [
            return _getSuccessor[node.right];
        ]
        return null;
    ]

    def _getPredecessor[node] [
        if [node.right != null] [
            return _getPredecessor[node.right];
        ]
        return node;
    ]

    def _getSuccessor[node] [
        if [current.left != null] [
            return _getSuccessor[node.left];
        ]
        return node;
    ]

    def _find[val curRoot] [
        while [curRoot != null] [
            if [comp[val curRoot.val] < 0] [
                curRoot = curRoot.left;
            ]
            else if [comp[val curRoot.val] > 0] [
                curRoot = curRoot.right;
            ]
            else [
                return curRoot;
            ]
        ]
    ]
        

    def setBalance[node] [
        var leftHeight = 0;
        var rightHeight = 0;
        if [node.left != null] [
            leftHeight = node.left.height;
        ]

        if [node.right != null] [
            rightHeight = node.right.height;
        ]

        node.height = maxHeight[leftHeight rightHeight] + 1;
    ]

    def rotate[parent child] [
        var grandparent = parent.parent;
        if [isLeftChild[child]] [
            setLeftChild[parent child.right];
            setRightChild[child parent];
        ]
        else [
            setRightChild[parent child.left];
            setLeftChild[child parent];
        ]

        if [grandparent == null] [
            root = child;
        ]
        else if [eq[grandparent.left parent]] [
            setLeftChild[grandparent child];
        ]
        else [
            setRightChild[grandparent child];
        ]
    ]
        

    def maxHeight[a b] [
        if [a > b] [
            return a;
        ]
        
        return b;
    ]

    def sibling[node] [
        if [eq[node node.parent.left]] [
            return node.parent.right;
        ]
        else [
            return node.parent.left;
        ]
    ]

    def favorite[parent] [
        var balFact = balanceFactor[parent];
        if [balFact == 1] [
            return parent.left;
        ]
        if [balFact == -1] [
            return parent.right;
        ]
        return null;
    ]

    def balanceFactor[node] [
        var leftHeight = 0;
        var rightHeight = 0;
        if [node.left != null] [
            leftHeight = node.left.height;
        ]
        if [node.right != null] [
            rightHeight = node.right.height;
        ]
        return rightHeight - leftHeight;
    ]

    def isBalanced[node] [
        var balFact = balanceFactor[node];
        return [balFact < 2] and [balFact > -2];
    ]

    def isLeftChild[node] [
        return eq[node node.parent.left];
    ]

    def isRightChild[node] [
        return eq[node node.parent.right];
    ]

    def setLeftChild[parent child] [
        parent.left = child;
        if [child != null] [
            child.parent = parent;
        ]
    ]

    def setRightChild[parent child] [
        parent.right = child;
        if [child != null] [
            child.parent = parent;
        ]
    ]

    def isLinear[parent child] [
        if [isLeftChild[parent]] [
            return isLeftChild[child];
        ]
        else [
            return isRightChild[child];
        ]
    ]

    def isLeaf[node] [
        return [node.left == null] and [node.right == null];
    ]

    return this;
]
def comp[a b] [
    if [a < b] [
        return -1;
    ]
    else if [a > b] [
        return 1;
    ]
    else [
        return 0;
    ]
]
`var t = AvlTree[comp];
`t.insert[3];
`t.insert[4];
`t.insert[5];
`t.insert[1];
`t.insert[0];
`for [i 10 100] [
`    if [[i % 2] == 0] [
`        t.insert[i];
`    ]
`    else [
`        t.insert[-i];
`    ]
`]
`t.printTree[];

def dict[] [
    def dictNode[key val] [
        return this;
    ]

    def comp[a b] [
        if [a.key > b.key] [
            return 1;
        ]
        if [a.key < b.key] [
            return -1;
        ]
        return 0;
    ]

    var store = AvlTree[comp lambda [node] [ return node.key; ]];

    def insert[key val] [
        var node = dictNode[key val];
        store.insert[node];
    ]

    def find[key] [
        var searchNode = dictNode[key null];
        return store.find[searchNode];
    ]

    def delete[key] [
        var deleteNode = find[key];
        store.delete[deleteNode];
    ]

    def update[key newVal] [
        var updateNode = find[key];
        updateNode.val = newVal;
    ]

    return this;
]

var d = dict[];
for [i 100] [
    if [[i % 2] == 0] [
        d.insert[[-i] [-i]];
    ]
    else [
        d.insert[i i];
    ]
]
println[d.find[-2].val.val];
d.store.printTree[];
