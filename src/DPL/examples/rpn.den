def Stack[] [
    def Node[val next] [
        return this;
    ]

    var current = Node[null null];
    var size = 0;

    def push[val] [
        var newNode = Node[val current];
        current = newNode;
        size = size + 1;
    ]

    def pop[] [
        var retVal = current.val;
        current = current.next;
        size = size - 1;
        return retVal;
    ]

    def peak[] [
        return current.val;
    ]

    return this;
]

def evalOp[op a b] [
    if [op == '+'] [
        return a + b;
    ]
    if [op == '-'] [
        return a - b;
    ]
    if [op == '*'] [
        return a * b;
    ]
    if [op == '/'] [
        return a / b;
    ]
    if [op == '^'] [
        return a ^ b;
    ]
]

def calculate[data] [
    var stack = Stack[];
    for [val in data] [
        var intVal = getInt[val];

        if [intVal != null] [
            stack.push[intVal];
        ]
        else [
            var b = stack.pop[];
            var a = stack.pop[];
            var result = evalOp[val a b];
            stack.push[result];
        ]
    ]

    if [stack.size == 1] [
        return stack.pop[];
    ]

    println['Error: misformed calculation'];
    return null;
]

var data = input['examples/input.txt'];
var res = calculate[data];
println[res];
