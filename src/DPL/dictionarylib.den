def AvlTree[comp getVal] [
    def AvlNode[key] [
        var height = 1;
        var left = null;
        var right = null;

        return this;
    ]

    var root = null;

    def height[n] [
        if [n == null] [
            return 0;
        ]
        return n.height;
    ]

    def max[a b] [
        if [a > b] [
            return a;
        ]
        return b;
    ]

    def rightRotate[y] [
        var x = y.left;
        var t2 = x.right;

        x.right = y;
        y.left = t2;

        y.height = max[height[y.left] height[y.right]] + 1;
        x.height = max[height[x.left] height[x.right]] + 1;

        return x;
    ]

    def leftRotate[x] [
        var y = x.right;
        var t2 = y.left;

        y.left = x;
        x.right = t2;

        x.height = max[height[x.left] height[x.right]] + 1;
        y.height = max[height[y.left] height[y.right]] + 1;

        return y;
    ]

    def getBalance[n] [
        if [n == null] [
            return 0;
        ]
        return height[n.left] - height[n.right];
    ]

    def insert[key] [
        root = _insert[root key];
    ]

    def _insert[node key] [
        if [node == null] [
            return AvlNode[key];
        ]
        if [comp[key node.key] < 0] [
            node.left = _insert[node.left key];
        ]
        else if [comp[key node.key] > 0] [
            node.right = _insert[node.right key];
        ]
        else [
            return node;
        ]

        node.height = max[height[node.left] height[node.right]] + 1;
        
        var balance = getBalance[node];

        if [[balance > 1] and [comp[key node.left.key] < 0]] [
            return rightRotate[node];
        ]
        if [[balance < -1] and [comp[key node.right.key] > 0]] [
            return leftRotate[node];
        ]
        if [[balance > 1] and [comp[key node.left.key] > 0]] [
            node.left = leftRotate[node.left];
            return rightRotate[node];
        ]
        if [[balance < -1] and [comp[key node.right.key] < 0]] [
            node.right = rightRotate[node.right];
            return leftRotate[node];
        ]

        return node;
    ]

    def minValueNode[node] [
        var current = node;
        while [current.left != null] [
            current = current.left;
        ]

        return current;
    ]

    def delete[key] [
        return _delete[root key];
    ]

    def _delete[root key] [
        if [root == null] [
            return root;
        ]

        if [comp[key root.key] < 0] [
            root.left = _delete[root.left key];
        ]
        else if [comp[key root.key] > 0] [
            root.right = _delete[root.right key];
        ]
        else [
            if [[root.left == null] or [root.right == null]] [
                var temp = null;
                if [root.left == null] [
                    temp = root.right;
                ]
                else [
                    temp = root.left;
                ]

                if [temp == null] [
                    temp = root;
                    root = null;
                ]
                else [
                    root = temp;
                ]
            ]
            else [
                var temp = minValueNode[root.right];
                root.key = temp.key;
                root.right = _delete[root.right temp.key];
            ]
        ]

        if [root == null] [
            return root;
        ]

        root.height = max[height[root.left] height[root.right]] + 1;
        var balance = getBalance[root];

        if [[balance > 1] and [getBalance[root.left] < 0]] [
            return rightRotate[root];
        ]
        if [[balance > 1] and [getBalance[root.left] < 0]] [
            root.left = leftRotate[root.left];
            return rightRotate[root];
        ]
        if [[balance < -1] and [getBalance[root.right] > 0]] [
            root.right = rightRotate[root.right];
            return leftRotate[root];
        ]

        return root;
    ]

    def find[key] [
        return _find[root key];
    ]

    def _find[root key] [
        if [root == null] [
            return null;
        ]
        if [comp[key root.key] < 0] [
            return _find[root.left key];
        ]
        if [comp[key root.key] > 0] [
            return _find[root.right key];
        ]
        return root.key;
    ]

    def printTree[] [
        _printTree[root];
        println[];
    ]

    def _printTree[node] [
        if [node != null] [
            _printTree[node.left];
            print[str[getVal[node.key]] + ' '];
            _printTree[node.right];
        ]
    ]

    return this;
]

def comp[a b] [
    if [a < b] [
        return -1;
    ]
    if [a > b] [
        return 1;
    ]
    return 0;
]

def dict[] [
    def dictNode[key val] [
        return this;
    ]

    def comp[a b] [
        if [a.key > b.key] [
            return 1;
        ]
        else if [a.key < b.key] [
            return -1;
        ]
        else [
            return 0;
        ]
    ]

    var tree = AvlTree[comp lambda [node] [ return node.key; ]];

    def insert[key val] [
        var node = dictNode[key val];
        tree.insert[node];
    ]

    def find[key] [
        var searchNode = dictNode[key null];
        return tree.find[searchNode];
    ]

    def get[key] [
        var node = find[key];
        if [node == null] [
            return null;
        ]
        return node.val;
    ]

    def delete[key] [
        var deleteNode = dictNode[key null];
        return tree.delete[deleteNode];
    ]

    def update[key newVal] [
        var updateNode = find[key];
        if [updateNode == null] [
            return null;
        ]
        updateNode.val = newVal;
        return updateNode;
    ]

    def print[] [
        tree.printTree[];
    ]

    return this;
]
