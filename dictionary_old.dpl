
def AvlTree[comp getVal] [
    def AvlNode[element left right] [
        var height;
        return this;
    ]

    var root = null;

    def insert[x] [
        root = _insert[x root];
    ]

    def delete[x] [
        root = _delete[x root];
    ]

    def findMin[] [
        return elementAt[_findMin[root]];
    ]

    def findMax[] [
        return elementAt[_findMax[root]];
    ]

    def find[x] [
        return elementAt[_find[x root]];
    ]

    def makeEmpty[] [
        root = null;
    ]

    def isEmpty[] [
        return root == null;
    ]

    def printTree[] [
        if [isEmpty[]] [
            println['Empty tree'];
        ]
        else [
            _printTree[root];
        ]
    ]

    def elementAt[t] [
        if [t == null] [
            return null;
        ]
        return t.element;
    ]

    def _insert[x t] [
        if [t == null] [
            t = AvlNode[x null null];
        ]
        else if [comp[x t.element] < 0] [
            t.left = _insert[x t.left];
            if [[height[t.left] - height[t.right]] == 2] [
                if [comp[x t.left.element] < 0] [
                    t = rotateWithLeftChild[t];
                ]
                else [
                    t = doubleWithLeftChild[t];
                ]
            ]
        ]
        else if [comp[x t.element] > 0] [
            t.right = _insert[x t.right];
            if [[height[t.right] - height[t.left]] == 2] [
                if [comp[x t.right.element] > 0] [
                    t = rotateWithRightChild[t];
                ]
                else [
                    t = doubleWithRightChild[t];
                ]
            ]
        ]
        t.height = max[height[t.left] height[t.right]] + 1;
        return t;
    ]

    def _delete[x t] [
        if [t == null] [
            return root;
        ]

        if [comp[x t.element] < 0] [
            t.left = _delete[x t.left];
        ]
        else if [comp[x t.element] > 0] [
            t.right = _delete[x t.right];
        ]
        else [
            if [[t.left == null] or [t.right == null]] [
                var temp;
                if [t.left != null] [
                    temp = t.left;
                ]
                else [
                    temp = t.right;
                ]

                if [temp == null] [
                    temp = t;
                    t = null;
                ]
                else [
                    t = temp;
                ]
            ]
            else [
                var temp = _findMin[t.right];
                t.element = temp.element;
                t.right = _delete[temp.element t.right];
            ]
        ]

        if [t == null] [
            return t;
        ]
        t.height = max[[height[t.left]] height[t.right]] + 1;

        var balance = getBalance[t];

        if [[balance > 1] and [getBalance[t.left] >= 0]] [
            return rotateWithRightChild[t];
        ]

        if [[balance > 1] and [getBalance[t.left] < 0]] [
            inspect[t.left];
            t.left = rotateWithLeftChild[t];
            return rotateWithRightChild[t];
        ]

        if [[balance < -1] and [getBalance[t.right] <= 0]] [
            inspect[t.left];
            return rotateWithLeftChild[t];
        ]

        if [[balance < -1] and [getBalance[t.right] > 0]] [
            t.right = rotateWithRightChild[t.right];
            return rotateWithLeftChild[t];
        ]

        return t;
    ]

    def _findMin[t] [
        if [t == null] [
            return t;
        ]

        while [t.left != null] [
            t = t.left;
        ]

        return t;
    ]

    def _findMax[t] [
        if [t == null] [
            return t;
        ]

        while [t.right != null] [
            t = t.right;
        ]

        return t;
    ]

    def _find[x t] [
        while [t != null] [
            if [comp[x t.element] < 0] [
                t = t.left;
            ]
            else if [comp[x t.element] > 0] [
                t = t.right;
            ]
            else [
                return t;
            ]
        ]

        return null;
    ]

    def getBalance[x] [
        if [x == null] [
            return 0;
        ]
        return height[x.left] - height[x.right];
    ]

    def _printTree[t] [
        if [t != null] [
            _printTree[t.left];
            println[getVal[t.element]];
            _printTree[t.right];
        ]
    ]

    def height[t] [
        if [t == null] [
            return -1;
        ]

        return t.height;
    ]

    def max[lhs rhs] [
        if [lhs > rhs] [
            return lhs;
        ]
        return rhs;
    ]

    def rotateWithLeftChild[k2] [
        var k1 = k2.left;
        k2.left = k1.right;
        k1.right = k2;
        k2.height = max[height[k2.left] height[k2.right]] + 1;
        k1.height = max[height[k1.left] k2.height] + 1;
        return k1;
    ]

    def rotateWithRightChild[k1] [
        var k2 = k1.right;
        k1.right = k2.left;
        k2.left = k1;
        k1.height = max[height[k1.left] height[k1.right]] + 1;
        k2.height = max[height[k2.right] k1.height] + 1;
        return k2;
    ]

    def doubleWithLeftChild[k3] [
        k3.left = rotateWithRightChild[k3.left];
        return rotateWithLeftChild[k3];
    ]

    def doubleWithRightChild[k1] [
        k1.right = rotateWithLeftChild[k1.right];
        return rotateWithRightChild[k1];
    ]

    return this;
]

def test[a b] [
    if [a > b] [
        return 1;
    ]
    else if [a < b] [
        return -1;
    ]
    else [
        return 0;
    ]
]

var t = AvlTree[test];

t.insert[1];
t.delete[1];
t.insert[2];
t.insert[3];
t.delete[2];
t.insert[-1];
t.delete[-1];
`t.printTree[];


def dict[] [
    def dictNode[key val] [
        return this;
    ]

    def comp[a b] [
        if [a.key > b.key] [
            return 1;
        ]
        if [a.key < b.key] [
            return -1;
        ]
        else [
            return 0;
        ]
    ]

    def getVal[node] [
        return node.key;
    ]

    var store = AvlTree[comp getVal];

    def insert[key value] [
        var node = dictNode[key value];
        store.insert[node];
    ]

    def find[key] [
        var searchNode = dictNode[key null];
        return store.find[searchNode];
    ]

    def delete[key] [
        var searchNode = dictNode[key null];
        store.delete[searchNode];
    ]

    def update[key newVal] [
        var updateNode = find[key];
        updateNode.val = newVal;
    ]

    return this;
]

var d = dict[];
for [i 100] [
    d.insert[i i];
]
for [i 50] [
    d.delete[i];
]
d.store.printTree[];
